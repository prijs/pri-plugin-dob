import * as fs from "fs-extra"
import * as _ from "lodash"
import * as normalizePath from "normalize-path"
import * as path from "path"
import * as prettier from "prettier"
import { helperPath, pri, storesPath, tempJsEntryPath } from "pri"
import { md5 } from "./utils/md5"

const LAYOUT_TEMP = "LayoutTempComponent"
const LAYOUT = "LayoutComponent"

const MARKDOWN_LAYOUT_TEMP = "MarkdownLayoutTempComponent"
const MARKDOWN_LAYOUT = "MarkdownLayoutComponent"

const safeName = (str: string) => _.upperFirst(_.camelCase(str))

interface IResult {
  projectAnalyseDob: {
    storeFiles: Array<{
      name: string
      file: path.ParsedPath
    }>
  }
}

export default (instance: typeof pri) => {
  const projectRootPath = instance.project.getProjectRootPath()

  instance.project.onAnalyseProject(files => {
    return {
      projectAnalyseDob: {
        storeFiles: files
          .filter(file => {
            const relativePath = path.relative(projectRootPath, path.join(file.dir, file.name))

            if (!relativePath.startsWith(storesPath.dir)) {
              return false
            }

            return true
          })
          .map(file => {
            return { file, name: safeName(file.name) }
          })
      }
    } as IResult
  })

  instance.project.onCreateEntry((analyseInfo: IResult, entry, env, projectConfig) => {
    const helperAbsolutePath = path.join(projectRootPath, path.format(helperPath))

    if (analyseInfo.projectAnalyseDob.storeFiles.length === 0) {
      if (fs.existsSync(helperAbsolutePath)) {
        fs.removeSync(helperAbsolutePath)
      }

      return
    }

    // Connect normal pages
    entry.pipe.set("normalPagesImportEnd", importEnd => {
      return `
        ${importEnd}.then(component => Connect()(component.default))
      `
    })

    // Connect layout
    entry.pipe.set("analyseLayoutImportName", text => LAYOUT_TEMP)
    entry.pipe.set("analyseLayoutBody", body => {
      return `
        ${body}
        const ${LAYOUT} = Connect()(${LAYOUT_TEMP})
      `
    })

    // Connect markdown layout
    entry.pipe.set("analyseMarkdownLayoutImportName", text => MARKDOWN_LAYOUT_TEMP)
    entry.pipe.set("analyseMarkdownLayoutBody", body => {
      return `
      ${body}
      const ${MARKDOWN_LAYOUT} = Connect()(${MARKDOWN_LAYOUT_TEMP})
    `
    })

    const entryRelativeToHelper = path.relative(
      path.join(tempJsEntryPath.dir),
      path.join(helperPath.dir, helperPath.name)
    )

    entry.pipeHeader(header => {
      return `
        ${header}
        import { useStrict } from "dob"
        import { Connect, Provider } from "dob-react"
        import { stores } from "${normalizePath(entryRelativeToHelper)}"
      `
    })

    entry.pipeBody(body => {
      return `
        ${body}
        useStrict()
      `
    })

    entry.pipeRenderRouter(router => {
      return `
        <Provider {...stores}>
          ${router}
        </Provider>
      `
    })

    const storesHelper = `
      import { combineStores } from "dob"

      ${analyseInfo.projectAnalyseDob.storeFiles
        .map(storeFile => {
          const importAbsolutePath = path.join(storeFile.file.dir, storeFile.file.name)
          const importRelativePath = path.relative(path.join(projectRootPath, helperPath.dir), importAbsolutePath)
          return `import { ${storeFile.name}Action, ${storeFile.name}Store } from "${normalizePath(
            importRelativePath
          )}"`
        })
        .join("\n")}

      const stores = combineStores({${analyseInfo.projectAnalyseDob.storeFiles
        .map(storeFile => {
          return `${storeFile.name}Action, ${storeFile.name}Store`
        })
        .join(",")}})

      export { stores }
    `

    // If has stores, create helper.ts
    fs.outputFileSync(
      helperAbsolutePath,
      prettier.format(getHelperContent(storesHelper), {
        semi: false,
        parser: "typescript"
      })
    )
  })
}

function getHelperContent(str: string) {
  return `
    /**
     * Do not edit this file.
     * This file is automatic generated to get type help.
     */
    ${str}
  `
}
